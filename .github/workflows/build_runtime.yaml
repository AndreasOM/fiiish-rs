name: Build Runtime

on:
  # :TODO: add push
  workflow_dispatch:
    inputs:
      # maybe we don't need this
      version:
        description: 'Version'
        required: true
        default: 'auto'
        type: choice
        options:
          - latest
          - auto
          - ref
      ref:
        description: 'The branch, tag, or SHA of the commit to build'
        required: false
        default: ''
        type: string
        
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-11
            target: x86_64-apple-darwin
            features: "audio-apple"
          - os: macos-11
            target: aarch64-apple-darwin
            features: "audio-apple"
       - os: ubuntu-latest
         target: x86_64-unknown-linux-gnu
         features: "audio-miniaudio"
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            features: "audio-miniaudio"

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref }}
          fetch-depth: 1
#          lfs: ''
#          submodules: ''

      # :TODO: setup platform specific dependencies

      - name: Generate VERSION
        run: |
          #VERSION=${{ github.event.inputs.ref }}
          VERSION=$(git show -s --format=%H  HEAD)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          DATE=$(git show -s --format=%ci HEAD|cut -b1-10)
          echo "DATE=${DATE}" >> $GITHUB_ENV
          echo "VERSION: ${VERSION}"
          echo "DATE:    ${DATE}"

      - name: Prepare Variables
        run: |
          temp=${{ runner.temp }}
          echo "TEMP=${temp}" >> $GITHUB_ENV
          parts_folder=${{ runner.temp }}/parts_folder
          mkdir -p ${parts_folder}
          echo "PARTS_FOLDER=${parts_folder}" >> $GITHUB_ENV
          package_folder=${{ runner.temp }}/package_folder
          mkdir -p ${package_folder}
          echo "PACKAGE_FOLDER=${package_folder}" >> $GITHUB_ENV
          runtime_tgz=fiiish-rs-runtime-${{ env.VERSION }}-${{ matrix.target }}.tgz
          fiiish_data_tgz=fiiish-rs-fiiish-data-${{ env.VERSION }}.tgz
          s3_archive_folder=${{ env.DATE }}/${{ env.VERSION }}
          echo "RUNTIME_TGZ=${runtime_tgz}" >> $GITHUB_ENV
          echo "FIIISH_DATA_TGZ=${fiiish_data_tgz}" >> $GITHUB_ENV
          echo "S3_ARCHIVE_FOLDER=${s3_archive_folder}" >> $GITHUB_ENV
          build_number=$(cat build_number.txt)
          echo "BUILD_NUMBER=${build_number}" >> $GITHUB_ENV
          echo "ARCHIVE=${{ runner.temp }}/${runtime_tgz}" >> $GITHUB_ENV

      - name: Not windows
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          echo "Not windows"

      - name: macOS
        if: ${{ matrix.os == 'macos-11' }}
        run: |
          echo "macOS"

      - name: Build AppIcon
        if: ${{ matrix.os == 'macos-11' }}
        run: |
          echo "Creating AppIcon"
          /Applications/Xcode.app/Contents/Developer/usr/bin/actool --version
          echo ${{ env.PARTS_FOLDER }}
          touch ${{ env.PARTS_FOLDER }}/test.txt
          echo "---"
          ls -l ${{ env.PARTS_FOLDER }}
          ls -l fiiish-rs/Assets.xcassets
          echo "---"
            /Applications/Xcode.app/Contents/Developer/usr/bin/actool \
              --version \
              --warnings \
              --errors \
              --notices \
              --compile ${{ env.PARTS_FOLDER }} \
              --app-icon AppIcon \
              --platform macosx \
              --minimum-deployment-target 10.0 \
              --output-partial-info-plist ${{ env.PARTS_FOLDER }}/partial-Info.plist \
              fiiish-rs/Assets.xcassets

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Cache crates
        uses: actions/cache@v2
        env:
          cache-name: cache-crates
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('fiiish-rs/Cargo.lock') }}

      - name: Run cargo build --release for ${{ matrix.target }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --release --manifest-path fiiish-rs/Cargo.toml --target ${{ matrix.target }} --no-default-features --features ${{ matrix.features }}
      

      - name: Add Info.plist
        if: ${{ matrix.os == 'macos-11' }}
        run: |
          echo "Adding Info.plist"
          version=$(grep version fiiish-rs/Cargo.toml|cut -d"\"" -f2|head -n 1)
          exp1="s/<key>CFBundleVersion<\\/key><string>.*<\\/string>/<key>CFBundleVersion<\\/key><string>${{ env.BUILD_NUMBER }}<\\/string>/g"
          exp2="s/<key>CFBundleShortVersionString<\\/key><string>.*<\\/string>/<key>CFBundleShortVersionString<\\/key><string>${version}<\\/string>/g"
          cat fiiish-rs/Info.plist|sed ${exp1} |sed ${exp2} > ${{ env.PARTS_FOLDER }}/Info.plist

      - name: Add build number
        run: |
          echo "Adding build number"
          cp build_number.txt ${{ env.PARTS_FOLDER }}/

      - name: Add binary
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          echo "Adding binary number"
          cp fiiish-rs/target/${{ matrix.target }}/release/fiiish ${{ env.PARTS_FOLDER }}/

      - name: Add binary .exe
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          echo "Adding binary .exe"
          cp fiiish-rs/target/${{ matrix.target }}/release/fiiish.exe ${{ env.PARTS_FOLDER }}/

      - name: List result
        run: |
          echo "sha:           ${{ github.sha }}"
          echo "ref_name:      ${{ github.ref_name }}"
          echo "ref:           ${{ github.ref }}"
          echo "ref_type:      ${{ github.ref_type }}"
          echo "event_name:    ${{ github.event_name }}"
          echo "actor:         ${{ github.actor }}"
          echo "run_id         ${{ github.run_id }}"
          # git rev-list --count ${{ github.sha }} # only works with deep clones
          cat build_number.txt
          ls -l fiiish-rs/target/${{ matrix.target }}/release/
          ls -l ${{ env.PARTS_FOLDER }}/
          
      - name: Create archive
        run: |
          cd ${{ env.PARTS_FOLDER }}
          tar czf ${{ env.ARCHIVE }} .
          ls -l ${{ env.ARCHIVE }}

      - name: Copy archive to S3
        run: |
          aws s3 cp ${{ env.ARCHIVE }} s3://artifacts.fiiish-rs.omnimad.net/${{ env.ARCHIVE_FOLDER }}/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "eu-west-1"        
